;; cc means count-change
* (cc 11 3)
+ (cc  1 3)
  + (cc -9 3)--0
  + (cc 1 2)-(cc -4 2)--0
    + (cc 1 1)-(cc 0 1)--1
      + (cc 1 0)--0
+ (cc 11 2)
  + (cc 6 2)
    + (cc 1 2)
      + (cc -4 2)--0
      + (cc 1 1)
        + (cc 0 1)--1
        + (cc 1 0)--0
    + (cc 6 1)
      + (cc 5 1)
        + (cc 4 1)
          + (cc 3 1)
            + (cc 2 1)
              + (cc 1 1)
                + (cc 0 1)--1
              + (cc 2 0)--0
            + (cc 3 0)--0
          + (cc 4 0)--0
        + (cc 5 0)--0
      + (cc 6 0)--0
  + (cc 11 1)
    + (cc 10 1)
      + (cc 9 1)
        + (cc 8 1)
          + (cc 7 1)
            + (cc 6 1)
              + (cc 5 1)
                + (cc 4 1)
                  + (cc 3 1)
                    + (cc 2 1)
                      + (cc 1 1)
                        + (cc 0 1)--1
                        + (cc 1 0)--0
                      + (cc 2 0)--0
                    + (cc 3 0)--0
                  + (cc 4 0)--0
                + (cc 5 0)--0
              + (cc 6 0)--0
            + (cc 7 0)--0
          + (cc 8 0)--0
        + (cc 9 0)--0
      + (cc 10 0)--0
    + (cc 11 0)--0

* In total, there are four ways.
* The growth of Order
+ as the change grows, the space required will increase as the depth of n,
  because each recursion will call the procedure cc again.
  + The growth of order of space is O(n)
+ As the change grows, there are k more steps need to reused. Therefore, the growth of order of time is 
